{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs24 \cf2 There's an array of 10,000 16-bit values, how do you count the bits most efficiently?\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab560\slleading20\partightenfactor0

\i\b \cf2 Brute force
\i0 : 
\b0 \
\
To determine if a bit is or not, it takes 2 operations:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	1.	}We shift the binary to the right by the bit position we want to know if its set or not\
{\listtext	2.	}We bitwise AND the results with binary 1 to determine if its set\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \
\pard\pardeftab560\li460\slleading20\partightenfactor0
\cf2 E.g. Decimal 10 in binary is 1010. To determine of bit at position 3 is set or not, we use:\
 (1010 >> 2 & 1). Which gives us 0.\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 To get total number of bits set, we need another 2 operations:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0\cf2 {\listtext	1.	}From the results above, we need one operation to compare whether the bit is 0 or 1\
{\listtext	2.	}Then we need another operation to increment the counter if the bit is set to 1\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \
So for each bit, we need to perform the 4 operations (shift, bitwise, compare, increment). And the value has 16 bits, and there are 10,000 of them. So the total number of operations is 10000 * 16 * 4 = 640, 000\
\
This algorithm takes O(n) for time complexity and O(1) for space.\
\
\
\pard\pardeftab560\slleading20\partightenfactor0

\i\b \cf2 Faster way:
\b0 \
\
\pard\pardeftab560\slleading20\partightenfactor0

\i0 \cf2 We build a table where for each byte we calculate a number of bits set.
\i \
\

\i0 From 00000000 to 11111111 (which is 0 to 255 in decimal, and 0x00 - 0xFF in hexadecimal)\
build up a look up table for the number of bits set.\
\
We already discussed above that to get the total number of bits set in a binary value, we need a total of 4 operations. So to build up this look up table , we need to loop through decimals 0 to 255, and for each of the 8 bits in that number, calculate the total bits set. \
\
So the total operations is 256 * 8 * 4 = 8096.\
\
The lookup table size is 384 bytes. \
We use 1 byte (8 bits) for the key\
Use 4 bits to store the decimal representing the number of bit counts\
We have 256 entries in the table\
(8 + 4) * 256 = 3072 bits\
3072/8 = 384 bytes\
 \
Then for each 16-bit int we split it to upper and lower\
\
for (n in array)\
   byte lo = n & 0xFF; // lower 8-bits, 0XFF is 255, which is 11111111\
   byte hi = n >> 8;   // higher 8-bits\
   // simply add number of bits in the upper and lower parts \
   // of each 16-bits number\
   // using the pre-calculated table\
   k += table[lo] + table[hi];\
\}\
\
In each iteration, we perform 6 operations:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls3\ilvl0\cf2 {\listtext	1.	}bitwise AND\
{\listtext	2.	}bit shift\
{\listtext	3.	}2 table access lookups\
{\listtext	4.	}decimal add,  table[lo] + table[hi]\
{\listtext	5.	}another decimal add, k += table[lo]\'85\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \
Total operations is 10000 * 6 = 60000 for the loop.\
\
Total operations is 60000 + 8096 = 68096.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
This algorithm also takes O(n) for time complexity and O(1) for space. However because of the use of the lookup table, there are less constant times so the overall time is faster. It\'92s about 640000/68096 ~ 9 times faster. However, the size increases, since the lookup table takes 384 bytes.\
}